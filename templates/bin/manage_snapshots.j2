#!/bin/bash


function main() {
  volume="{{ backup_prefix }}"
  snapshots_dir="${volume}/snapshots"

  mkdir -p "${snapshots_dir}" \
    || fail "Failed to create snapshot directory:  '${snapshots_dir}'"
  cd "${snapshots_dir}" \
    || fail "Failed to enter snapshot directory:  '${snapshots_dir}'"

  create_snapshots
  remove_snapshots
}


function create_snapshots() {
  snapshot_from="${volume}"
  for time in "${year}"{,-"${month}"{,-"${day}"{,T"${hour}"}}}; do
    if test -d "${time}"; then
      inform "Snapshot already exists:  '$(pwd)/${time}'"
    else
      btrfs subvolume snapshot -r "${snapshot_from}" "${time}" \
        || fail "Failed to create snapshot:  '$(pwd)/${time}'"
      snapshot_from="${time}"
      inform "Created snapshot:  '$(pwd)/${time}'"
    fi
  done
}


function remove_snapshots() {
  shopt -s nullglob

  years_target_count="{{ snapshot_yearlies }}"
  months_target_count="{{ snapshot_monthlies }}"
  days_target_count="{{ snapshot_dailies }}"
  hours_target_count="{{ snapshot_hourlies }}"

  # Compensate for leap years.
  oldest_year="$(date -d "${year} -$(( years_target_count - 1 ))years" '+%Y')"
  # Compensate for varying month lengths.
  oldest_month="$(date -d "${year}-${month}-01 -$(( months_target_count - 1 ))months" '+%Y-%m')"
  # Do not account for DST begin and end.
  oldest_day="$(date -d "-$(( days_target_count - 1 ))days" '+%Y-%m-%d')"
  oldest_hour="$(date -d "-$(( hours_target_count - 1 ))hours" '+%Y-%m-%dT%H')"

  # Any file with a matching name is assumed to be a snapshot.  Keep this
  # directory clean.
  prune yearly "${years_target_count}" "${oldest_year}" \
    <<< [0-9][0-9][0-9][0-9]
  prune monthly "${months_target_count}" "${oldest_month}" \
    <<< [0-9][0-9][0-9][0-9]-[0-9][0-9]
  prune daily "${days_target_count}" "${oldest_day}" \
    <<< [0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]
  prune hourly "${hours_target_count}" "${oldest_hour}" \
    <<< [0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]T[0-9][0-9]
}


function prune() {
  adjective="${1}"
  target_count="${2}"
  oldest_snapshot="${3}"
  # Number of arguments may be limited.  Take the list of unknown length on stdin.
  # This assumes newline is the only whitespace and separates entries.
  snapshots=( $(cat) )
  
  oldest_snapshot_numeric="$(numeric "${oldest_snapshot}")"
  # Don't confuse seq.  Only proceed if there are excess snapshots.
  if test "{{ '${#snapshots[@]}' }}" -gt "${target_count}"; then
    # Keep at least $target_count snapshots.
    # (Don't delete all if all are old, even if there are more than $target_count.)
    for i in $(seq 0 "$(( "{{ '${#snapshots[@]}' }}" - 1 - target_count  ))"); do
      snapshot="${snapshots[i]}"
      snapshot_numeric="$(numeric "${snapshot}")"
      # Keep any snapshots younger than $oldest.
      # (Don't delete $oldest and younger even if those are more than $target_count.)
      if test "${snapshot_numeric}" -lt "${oldest_snapshot_numeric}"; then
        btrfs subvolume delete "${snapshot}" \
          || fail "Failed to delete snapshot:  '$(pwd)/${snapshot}'"
        inform "Deleted snapshot:  '$(pwd)/${snapshot}'"
      else
        warn "Target count exceeded (${target_count}) but deletion candidate (${snapshot}) is not older than target for oldest snapshot (${oldest_snapshot}).  Skipping."
      fi
    done
  else
    inform "Not more than target count of ${adjective} snapshots found.  ({{ '${#snapshots[@]}' }} < ${target_count})"
  fi
}


function numeric() {
  sed 's/[^0-9]//g' <<< "${@}"
}


function inform() {
  printf 'INFO:     %s\n' "${1}"
}


function warn() {
  printf 'WARNING:  %s\n' "${1}" >&2
}


function fail() {
  printf 'ERROR:    %s\n' "${1}" >&2
  exit "${2:-1}"
}

# Get the current time.
year="$(date '+%Y')"
month="$(date '+%m')"
day="$(date '+%d')"
hour="$(date '+%H')"

main "${@}"
